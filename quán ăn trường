<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <title>Quán Ăn Ngon - Cửa Hàng Trực Tuyến</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap');

        :root {
            --primary-color: #ff6b6b;
            --secondary-color: #556270;
            --bg-color: #f8f8f8;
            --card-bg: #fff;
            --text-color: #333;
            --border-radius: 12px;
            --shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: auto;
            padding: 20px;
        }

        header {
            background-color: var(--primary-color);
            color: #fff;
            padding: 15px 40px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 700;
        }

        #admin-btn {
            background-color: #fff;
            color: var(--primary-color);
            border: none;
            padding: 12px 25px;
            font-size: 1em;
            font-weight: 600;
            border-radius: 30px;
            cursor: pointer;
            transition: var(--transition);
        }

        #admin-btn:hover {
            background-color: #ffe6e6;
            transform: scale(1.05) translateY(-2px);
            box-shadow: var(--shadow);
        }

        .main-container {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            gap: 25px;
            padding: 0 20px;
            margin-top: 30px;
        }

        @media (max-width: 992px) {
            .main-container {
                grid-template-columns: 1fr;
            }
        }

        .card {
            background: var(--card-bg);
            padding: 30px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        .card.left-sidebar, .card.right-sidebar {
            padding: 20px;
            min-height: 500px;
        }
        
        h2 {
            font-size: 2em;
            color: var(--secondary-color);
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
            margin-top: 0;
            font-weight: 600;
        }

        #product-list-container {
            position: relative;
        }

        .category-filter {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        .category-btn {
            background-color: #f0f0f0;
            color: #555;
            border: 1px solid #ddd;
            padding: 8px 15px;
            border-radius: 20px;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 600;
        }

        .category-btn.active, .category-btn:hover {
            background-color: var(--primary-color);
            color: #fff;
            border-color: var(--primary-color);
        }

        #product-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
        }

        .product {
            border: 1px solid #e0e0e0;
            border-radius: var(--border-radius);
            padding: 15px;
            text-align: center;
            background: var(--card-bg);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            transition: var(--transition);
            cursor: pointer;
        }

        .product:hover {
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(-5px);
        }

        .product img {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 15px;
        }

        .product h3 {
            margin: 10px 0 5px 0;
            font-size: 1.2em;
            color: var(--text-color);
        }

        .product p {
            color: var(--primary-color);
            font-weight: 700;
            font-size: 1.2em;
            margin: 0;
        }

        .product button {
            background: var(--primary-color);
            color: #fff;
            border: none;
            padding: 10px 15px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: 600;
            transition: background 0.3s, transform 0.2s;
            margin-top: 10px;
        }

        .product button:hover {
            background: #ff4a4a;
            transform: scale(1.05);
        }
        
        #toast-notification {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: #fff;
            padding: 10px 20px;
            border-radius: 5px;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.5s, visibility 0.5s;
            z-index: 1000;
        }
        
        #toast-notification.show {
            opacity: 1;
            visibility: visible;
        }

        .main-action-btn {
            width: 100%;
            margin-top: 20px;
            padding: 15px;
            font-size: 1.1em;
            font-weight: bold;
            border-radius: 10px;
            transition: var(--transition);
        }

        #order-btn {
            background-color: var(--secondary-color);
            color: #fff;
            border: none;
        }

        #order-btn:hover {
            background-color: #44505c;
            transform: translateY(-2px);
        }

        #check-order-btn {
            background: #2ecc71;
            color: #fff;
            border: none;
        }

        #check-order-btn:hover {
            background: #27ae60;
            transform: translateY(-2px);
        }

        .cart-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }

        .cart-item:last-child {
            border-bottom: none;
        }

        .cart-item img {
            width: 70px;
            height: 70px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 15px;
        }

        .cart-item-info {
            flex-grow: 1;
        }

        .cart-item-info h4 {
            margin: 0;
            font-size: 1.1em;
            font-weight: 600;
        }

        .cart-item-info p {
            margin: 5px 0 0;
            color: var(--primary-color);
            font-weight: bold;
        }

        .quantity-control {
            display: flex;
            align-items: center;
        }

        .quantity-control button {
            background: #f0f0f0;
            color: #555;
            border: 1px solid #ddd;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: var(--transition);
        }

        .quantity-control button:hover {
            background-color: #e0e0e0;
        }
        
        .quantity-control span {
            margin: 0 10px;
            font-weight: bold;
        }
        
        #check-order-result {
            margin-top: 20px;
            padding: 15px;
            background-color: #e8f5e9;
            border: 1px solid #c8e6c9;
            border-radius: 10px;
            color: #388e3c;
        }
        
        #check-order-result ul {
            text-align: left;
            padding-left: 20px;
            margin: 10px 0 0;
        }
        
        .modal, .admin-page, .pre-order-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .modal-content {
            background: var(--card-bg);
            padding: 30px;
            border-radius: var(--border-radius);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            min-width: 400px;
            text-align: center;
            position: relative;
        }

        .admin-page-content {
            background: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            min-width: 90%;
            max-width: 1000px;
            height: 90vh;
            display: flex;
            flex-direction: column;
            padding: 30px;
            position: relative;
        }

        .pre-order-modal-content {
            background: var(--card-bg);
            padding: 30px;
            border-radius: var(--border-radius);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            width: 80%;
            max-width: 700px;
            text-align: center;
            position: relative;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .pre-order-modal-content .product {
            cursor: default;
        }

        .pre-order-modal-content .product:hover {
            transform: none;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .pre-order-modal-content .product button {
            background: #2ecc71;
            color: #fff;
            border: none;
            padding: 10px 15px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: 600;
            transition: background 0.3s;
            margin-top: 10px;
        }

        .pre-order-modal-content .product button:hover {
            background: #27ae60;
        }

        #pre-order-product-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
            max-height: 400px;
            overflow-y: auto;
            padding-right: 15px;
        }
        
        #pre-order-cart-items {
            max-height: 200px;
            overflow-y: auto;
            padding-right: 15px;
            margin-top: 20px;
        }
        
        .pre-order-card h4 {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }

        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }

        .admin-header h2 {
            border-bottom: none;
            margin-bottom: 0;
            color: var(--secondary-color);
        }
        
        #admin-search-box {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        #admin-search-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 1em;
        }
        #admin-search-btn, #admin-search-clear-btn {
            padding: 10px 15px;
            border: none;
            border-radius: 8px;
            color: #fff;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s;
        }
        #admin-search-btn {
            background-color: #3498db;
        }
        #admin-search-btn:hover {
            background-color: #2980b9;
        }
        #admin-search-clear-btn {
            background-color: #e74c3c;
            display: none;
        }
        #admin-search-clear-btn:hover {
            background-color: #c0392b;
        }

        #admin-dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
            text-align: center;
        }
        .dashboard-item {
            background: #f0f4f7;
            padding: 20px;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            transition: var(--transition);
        }
        .dashboard-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0,0,0,0.1);
        }
        .dashboard-item h4 {
            margin: 0;
            font-size: 1.1em;
            color: #777;
        }
        .dashboard-item p {
            margin: 5px 0 0;
            font-size: 2.5em;
            font-weight: bold;
            color: var(--secondary-color);
        }
        .dashboard-item.total p { color: #3498db; }
        .dashboard-item.pending p { color: #e67e22; }
        .dashboard-item.received p { color: #2ecc71; }
        .dashboard-item.paid p { color: #51c0f7; }
        
        #admin-filter-buttons {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        .filter-btn {
            background-color: #ecf0f1;
            color: #2c3e50;
            border: 1px solid #bdc3c7;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s;
        }
        .filter-btn:hover, .filter-btn.active {
            background-color: var(--primary-color);
            color: #fff;
            border-color: var(--primary-color);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        #orders-list-admin-filtered {
            flex-grow: 1;
            overflow-y: auto;
            padding-right: 15px;
        }

        .admin-order-item {
            background: #f7f7f7;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 15px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            transition: var(--transition);
        }

        .admin-order-item:hover {
            transform: scale(1.01);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .order-info p {
            margin: 5px 0;
        }
        
        .order-info h4 {
            font-size: 1.2em;
            color: #333;
            margin-bottom: 10px;
        }

        .order-actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .order-actions button {
            padding: 8px 15px;
            font-size: 0.9em;
            border-radius: 8px;
            border: none;
            color: #fff;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .order-actions .btn-nhan-don {
            background: #2ecc71;
        }
        .order-actions .btn-nhan-don:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .order-actions .btn-thanh-toan {
            background: #3498db;
        }
        .order-actions .btn-xoa-don {
            background: #dc3545;
        }

        .status-tag {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 0.9em;
        }
        
        .status-pending {
            background-color: #ffeb3b;
            color: #795548;
        }
        
        .status-received {
            background-color: #4caf50;
            color: #fff;
        }
        
        .status-paid {
            background-color: #51c0f7;
            color: #fff;
        }

        .modal-close-btn {
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            font-size: 1.5em;
            color: #999;
            cursor: pointer;
        }
        
        .main-action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .pre-order-card {
            background: #f9f9f9;
            padding: 20px;
            border-radius: 10px;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.05);
            margin-bottom: 15px;
        }

        .pre-order-footer {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            margin-top: 15px;
        }

        #pre-order-total {
            font-weight: bold;
            font-size: 1.2em;
            margin-right: 15px;
        }
        
        #submit-pre-order-btn {
            padding: 15px 25px;
            font-size: 1.1em;
            font-weight: bold;
            background-color: #2ecc71;
            color: #fff;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background 0.3s;
        }

        #submit-pre-order-btn:hover {
            background-color: #27ae60;
        }
        .pre-order-card .pre-order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .pre-order-card .pre-order-header h4 {
            margin: 0;
            border-bottom: none;
            padding-bottom: 0;
        }
        .pre-order-card .pre-order-header button {
            padding: 10px 20px;
            background-color: #2ecc71;
            color: #fff;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            transition: background-color 0.3s;
        }
        .pre-order-card .pre-order-header button:hover {
            background-color: #27ae60;
        }

        /* Loading Spinner */
        #loading-spinner {
            display: none;
            position: fixed;
            z-index: 9999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.7);
            justify-content: center;
            align-items: center;
        }

        .spinner {
            border: 8px solid #f3f3f3;
            border-top: 8px solid #ff6b6b;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* NEW STYLES */

        .main-container .main-content {
            grid-column: 2;
        }
        
        .main-container .sidebar {
            grid-column: 1 / span 1;
        }

        .main-container .cart-sidebar {
            grid-column: 3 / span 1;
        }

        @media (max-width: 992px) {
            .main-container .main-content {
                grid-column: 1;
            }
            .main-container .sidebar, .main-container .cart-sidebar {
                grid-column: 1;
            }
        }
        
        .sticky-cart-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 500;
            background-color: var(--secondary-color);
            color: white;
            padding: 15px;
            border-radius: 50%;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: transform 0.3s, background-color 0.3s;
        }
        
        .sticky-cart-btn:hover {
            background-color: #44505c;
            transform: scale(1.1);
        }
        
        .sticky-cart-btn.pulse-animation {
            animation: pulse 0.5s;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        #cart-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        #cart-modal .modal-content {
            min-width: 500px;
            max-width: 600px;
        }

        /* NEW STYLES FOR PAYMENT MODAL */
        #payment-modal .modal-content {
            min-width: 500px;
            max-width: 550px;
        }

        #payment-methods {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
        }

        #payment-methods button {
            padding: 12px 25px;
            font-size: 1em;
            border-radius: 8px;
            cursor: pointer;
            border: 2px solid #ddd;
            background-color: #f9f9f9;
            transition: var(--transition);
        }

        #payment-methods button:hover {
            border-color: var(--secondary-color);
        }

        #payment-methods button.active {
            border-color: var(--primary-color);
            background-color: #fff0f0;
            font-weight: bold;
        }

        #qr-code-container {
            margin-top: 20px;
            padding: 20px;
            background-color: #f5f5f5;
            border-radius: var(--border-radius);
            display: none; /* Hidden by default */
        }
        
        #qr-code-container img {
            max-width: 200px;
            height: auto;
            display: block;
            margin: 0 auto 15px;
            border: 1px solid #ddd;
        }

        #qr-note {
            background-color: #fffbe6;
            border: 1px solid #ffe58f;
            color: #8a6d3b;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
        }

        #payment-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 30px;
        }

        #payment-actions button {
            padding: 12px 25px;
            font-size: 1em;
            font-weight: bold;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            transition: var(--transition);
        }

        #confirm-order-btn {
            background-color: #2ecc71;
            color: white;
        }
        #confirm-order-btn:hover {
            background-color: #27ae60;
        }

        #cancel-order-btn {
            background-color: #e74c3c;
            color: white;
        }
        #cancel-order-btn:hover {
            background-color: #c0392b;
        }

    </style>
</head>
<body>
    <div id="loading-spinner">
        <div class="spinner"></div>
    </div>
    
    <div id="toast-notification">Đã thêm vào giỏ hàng!</div>

    <div class="overlay">
        <header>
            <h1>Quán Ăn Ngon 😋</h1>
            <button id="admin-btn">Quản Trị Viên</button>
        </header>

        <div class="container main-container">
            <section class="card sidebar">
                <h2>Danh Mục Món Ăn ✨</h2>
                <div class="category-filter" style="flex-direction: column; align-items: flex-start;">
                    <button class="category-btn active" data-category="all" onclick="filterProducts('all', this)">Tất cả</button>
                    <button class="category-btn" data-category="main" onclick="filterProducts('main', this)">Món Chính</button>
                    <button class="category-btn" data-category="snack" onclick="filterProducts('snack', this)">Món Ăn Nhẹ</button>
                    <button class="category-btn" data-category="drink" onclick="filterProducts('drink', this)">Đồ Uống</button>
                </div>
            </section>

            <section class="card main-content">
                <h2>Thực Đơn Hôm Nay 🍜</h2>
                <div id="product-list-container">
                    <div id="product-list"></div>
                </div>
            </section>

            <section class="card cart-sidebar">
                <h2>Kiểm Tra Đơn Hàng 🧾</h2>
                <div id="check-order-box">
                    <input type="text" id="order-check-input" placeholder="Nhập mã đơn hàng..." style="width: 100%; padding: 10px; box-sizing: border-box; border-radius: 8px; border: 1px solid #ccc; margin-bottom: 10px;" />
                    <button id="check-order-btn" class="main-action-btn" style="margin-top: 0;">Kiểm Tra</button>
                    <div id="check-order-result"></div>
                </div>
            </section>
        </div>
        
        <div class="sticky-cart-btn" onclick="openCartModal()">
            <i class="fas fa-shopping-cart" style="font-size: 1.5em;"></i>
        </div>
    </div>
    
    <div id="cart-modal" class="modal">
        <div class="modal-content">
            <button class="modal-close-btn" onclick="closeCartModal()">&times;</button>
            <section id="cart">
                <h2>Giỏ Hàng Của Bạn 🛒</h2>
                <div id="cart-items">Giỏ hàng trống.</div>
                <div id="cart-total" style="font-size: 1.5em; font-weight: bold; text-align: right; margin-top: 20px; color: var(--secondary-color);">Tổng tiền: 0 VNĐ</div>
                <button id="order-btn" class="main-action-btn">Đặt Hàng Ngay</button>
            </section>
        </div>
    </div>

    <div id="payment-modal" class="modal">
        <div class="modal-content">
            <button class="modal-close-btn" onclick="closePaymentModal()">&times;</button>
            <h2>Xác nhận và Thanh toán</h2>
            <p>Mã đơn hàng của bạn là: <b id="payment-order-code" style="color: var(--primary-color); font-size: 1.2em;"></b></p>

            <div id="payment-methods">
                <button id="pay-direct-btn" onclick="selectPaymentMethod('direct', this)">Thanh toán trực tiếp</button>
                <button id="pay-qr-btn" onclick="selectPaymentMethod('qr', this)">Thanh toán bằng mã QR</button>
            </div>

            <div id="qr-code-container">
                <p>Vui lòng quét mã QR dưới đây để thanh toán.</p>
                <img src="https://api.vietqr.io/image/970422-19038753239011-p8k2k.jpg?accountName=TRAN%20VAN%20THANH&amount=0" alt="Mã QR thanh toán">
                <p id="qr-note">
                    <i class="fas fa-exclamation-triangle"></i> 
                    <b>LƯU Ý QUAN TRỌNG:</b> Khi chuyển khoản, bạn nhớ nhập đúng <b>Mã đơn hàng</b> ở trên vào phần "Nội dung/Ghi chú" để chúng tôi xác nhận!
                </p>
            </div>

            <div id="payment-actions">
                <button id="cancel-order-btn" onclick="closePaymentModal()">Hủy</button>
                <button id="confirm-order-btn" onclick="submitOrder()">OK (Xác nhận đặt hàng)</button>
            </div>
        </div>
    </div>

    <div id="admin-modal" class="modal">
        <div class="modal-content">
            <button class="modal-close-btn" onclick="closeAdminModal()">&times;</button>
            <div id="admin-login">
                <h3>Đăng Nhập Quản Trị</h3>
                <input id="admin-user" placeholder="Tài khoản" style="width: calc(100% - 22px); padding: 10px; margin-bottom: 10px; border-radius: 5px; border: 1px solid #ccc;" /><br>
                <input id="admin-pass" type="password" placeholder="Mật khẩu" style="width: calc(100% - 22px); padding: 10px; margin-bottom: 10px; border-radius: 5px; border: 1px solid #ccc;" /><br>
                <button onclick="adminLogin()">Đăng Nhập</button>
                <div id="admin-error" style="color:red; margin-top:10px;"></div>
            </div>
        </div>
    </div>

    <div id="pre-order-modal" class="pre-order-modal">
        <div class="pre-order-modal-content">
            <button class="modal-close-btn" onclick="closePreOrderModal()">&times;</button>
            <h3>Tạo Đơn Hàng Trước Cho Khách</h3>
            <div class="pre-order-card">
                <h4>Chọn món ăn</h4>
                <div id="pre-order-product-list"></div>
            </div>
            <div class="pre-order-card">
                <div class="pre-order-header">
                    <h4>Giỏ hàng đặt trước</h4>
                    <button id="submit-pre-order-btn" style="display:none;">Đặt Hàng</button>
                </div>
                <div id="pre-order-cart-items">Giỏ hàng trống.</div>
                <div class="pre-order-footer">
                    <div id="pre-order-total" style="font-weight: bold; font-size: 1.2em;">Tổng tiền: 0 VNĐ</div>
                </div>
            </div>
        </div>
    </div>

    <div id="admin-page" class="admin-page">
        <div class="admin-page-content">
            <button id="pre-order-btn" class="main-action-btn" style="background-color: #3498db; margin-bottom: 20px;" onclick="openPreOrderModalFromAdmin()">
                <i class="fas fa-plus"></i> Đặt Hàng Trước
            </button>
            <div class="admin-header">
                <h2>Trang Quản Trị Đơn Hàng ✨</h2>
                <button onclick="logoutAdmin()" class="btn-xoa-don"><i class="fas fa-sign-out-alt"></i> Đăng xuất</button>
            </div>
            
            <div id="admin-search-box">
                <input type="text" id="admin-search-input" placeholder="Nhập mã đơn hàng..." />
                <button id="admin-search-btn" onclick="searchOrders()">Tìm kiếm</button>
                <button id="admin-search-clear-btn" onclick="clearSearch()">Thoát tìm kiếm</button>
            </div>

            <div id="admin-dashboard">
                <div class="dashboard-item total">
                    <h4>Tổng Đơn Hàng</h4>
                    <p id="total-orders">0</p>
                </div>
                <div class="dashboard-item pending">
                    <h4>Chờ Nhận</h4>
                    <p id="pending-orders">0</p>
                </div>
                <div class="dashboard-item received">
                    <h4>Đã Nhận</h4>
                    <p id="received-orders">0</p>
                </div>
                <div class="dashboard-item paid">
                    <h4>Đã Trả Tiền</h4>
                    <p id="paid-orders">0</p>
                </div>
            </div>
            
            <div id="admin-filter-buttons">
                <button class="filter-btn active" data-filter="all" onclick="filterOrders('all', this)">Tất cả</button>
                <button class="filter-btn" data-filter="pending" onclick="filterOrders('pending', this)">Chờ nhận</button>
                <button class="filter-btn" data-filter="received" onclick="filterOrders('received', this)">Đã nhận</button>
                <button class="filter-btn" data-filter="paid" onclick="filterOrders('paid', this)">Đã trả tiền</button>
            </div>
            <div id="orders-list-admin-filtered"></div>
        </div>
    </div>
    
    <script>
        // NEW FUNCTION: Tự động thêm thẻ meta viewport
        function setupViewport() {
            const isMobile = window.innerWidth < 992;
            let viewportContent = "width=device-width, initial-scale=1.0";

            if (isMobile) {
                if (confirm("Bạn có muốn xem trang ở chế độ máy tính để có trải nghiệm tốt nhất không?")) {
                    viewportContent = "width=1200";
                }
            }

            let viewportMeta = document.querySelector('meta[name="viewport"]');
            if (!viewportMeta) {
                viewportMeta = document.createElement('meta');
                viewportMeta.setAttribute('name', 'viewport');
                document.head.appendChild(viewportMeta);
            }
            viewportMeta.setAttribute('content', viewportContent);
        }
        
        setupViewport(); // Chạy hàm khi tải trang


        const JSONBIN_API_KEY = '$2a$10$Ty8HvRqKPOpJsXQRP.cLxeAARlfxR9z2.XRrPnzWKzLtCsoqutZba';
        const JSONBIN_BIN_ID = '68ac4d92ae596e708fd50e99';

        const products = [
            { id: 1, name: "Phở Bò 🍲", price: 40000, image: "https://cdn.tgdd.vn/2021/06/CookProduct/1200-1200x676-13.jpg", category: "main" },
            { id: 2, name: "Bánh Mì Thịt 🥖", price: 20000, image: "https://cdn.tgdd.vn/2021/06/CookProduct/1200-1200x676-2.jpg", category: "snack" },
            { id: 3, name: "Cơm Tấm 🍚", price: 35000, image: "https://cdn.tgdd.vn/2021/06/CookProduct/1200-1200x676-14.jpg", category: "main" },
            { id: 4, name: "Bún Chả 🍜", price: 45000, image: "https://cdn.tgdd.vn/2021/06/CookProduct/1200-1200x676-11.jpg", category: "main" },
            { id: 5, name: "Gỏi Cuốn 🥗", price: 25000, image: "https://cdn.tgdd.vn/2021/06/CookProduct/1200-1200x676-9.jpg", category: "snack" },
            { id: 6, name: "Mì 🍝", price: 50000, image: "https://cdn.tgdd.vn/2021/06/CookProduct/mi-goi-thit-bo-1200x676.jpg", category: "main" },
            { id: 7, name: "Chè Đậu Xanh 🍮", price: 15000, image: "https://cdn.tgdd.vn/2021/06/CookProduct/che-dau-xanh-1200x676.jpg", category: "snack" },
            { id: 8, name: "Cà Phê Sữa ☕", price: 18000, image: "https://cdn.tgdd.vn/2021/06/CookProduct/ca-phe-sua-da-1200x676.jpg", category: "drink" }
        ];

        let cart = [];
        let preOrderCart = [];
        let orders = [];
        let refreshIntervalId;
        let isLoggedIn = false;
        let tempOrderCode = ''; // NEW: Biến tạm lưu mã đơn hàng
        let selectedPaymentMethod = ''; // NEW: Biến lưu phương thức thanh toán

        function showSpinner() {
            document.getElementById('loading-spinner').style.display = 'flex';
        }

        function hideSpinner() {
            document.getElementById('loading-spinner').style.display = 'none';
        }

        function showToast(message) {
            const toast = document.getElementById('toast-notification');
            toast.innerText = message;
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 2000);
        }

        function pulseCart() {
            const cartBtn = document.querySelector('.sticky-cart-btn');
            cartBtn.classList.add('pulse-animation');
            setTimeout(() => {
                cartBtn.classList.remove('pulse-animation');
            }, 500);
        }

        async function fetchOrders() {
            try {
                const res = await fetch(`https://api.jsonbin.io/v3/b/${JSONBIN_BIN_ID}/latest`, {
                    headers: { 'X-Master-Key': JSONBIN_API_KEY }
                });
                if (!res.ok) throw new Error('Failed to fetch orders');
                const data = await res.json();
                return (data && data.record && Array.isArray(data.record.orders)) ? data.record.orders : [];
            } catch (err) {
                console.error('Error fetching orders:', err);
                return [];
            } finally {
                hideSpinner();
            }
        }

        async function saveOrders(remoteOrders) {
            try {
                showSpinner();
                await fetch(`https://api.jsonbin.io/v3/b/${JSONBIN_BIN_ID}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json', 'X-Master-Key': JSONBIN_API_KEY },
                    body: JSON.stringify({ orders: remoteOrders })
                });
            } catch (err) {
                console.error('Error saving orders:', err);
            } finally {
                hideSpinner();
            }
        }

        function renderProducts(category = 'all') {
            const productList = document.getElementById('product-list');
            const filteredProducts = category === 'all' ? products : products.filter(p => p.category === category);
            
            if (filteredProducts.length === 0) {
                productList.innerHTML = '<p style="text-align: center; color: #777;">Chưa có món ăn trong danh mục này.</p>';
                return;
            }

            productList.innerHTML = filteredProducts.map(product => `
                <div class="product" data-id="${product.id}">
                    <img src="${product.image}" alt="${product.name}" />
                    <h3>${product.name}</h3>
                    <p>Giá: ${product.price.toLocaleString()} VNĐ</p>
                    <button onclick="addToCart(${product.id})">Thêm vào giỏ</button>
                </div>
            `).join('');
        }

        window.filterProducts = function(category, btn) {
            const buttons = document.querySelectorAll('.category-btn');
            buttons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            renderProducts(category);
        }

        function renderCart() {
            const cartItems = document.getElementById('cart-items');
            const cartTotal = document.getElementById('cart-total');
            const orderBtn = document.getElementById('order-btn');
            if (cart.length === 0) {
                cartItems.innerHTML = 'Giỏ hàng trống.';
                cartTotal.innerHTML = 'Tổng tiền: 0 VNĐ';
                orderBtn.style.display = 'none';
                return;
            }
            orderBtn.style.display = 'block';
            let total = 0;
            cartItems.innerHTML = cart.map((item, idx) => {
                total += item.price * item.quantity;
                return `
                    <div class="cart-item">
                        <img src="${item.image}" alt="${item.name}" />
                        <div class="cart-item-info">
                            <h4>${item.name}</h4>
                            <p>${item.price.toLocaleString()} VNĐ</p>
                        </div>
                        <div class="quantity-control">
                            <button onclick="changeQty(${idx}, -1)">-</button>
                            <span>${item.quantity}</span>
                            <button onclick="changeQty(${idx}, 1)">+</button>
                        </div>
                    </div>
                `;
            }).join('');
            cartTotal.innerHTML = `Tổng tiền: ${total.toLocaleString()} VNĐ`;
        }

        window.changeQty = function(idx, delta) {
            cart[idx].quantity += delta;
            if (cart[idx].quantity <= 0) {
                cart.splice(idx, 1);
            }
            renderCart();
        };

        window.addToCart = function(productId) {
            const prod = products.find(p => p.id === productId);
            const found = cart.find(item => item.id === prod.id);
            if (found) {
                found.quantity += 1;
            } else {
                cart.push({ ...prod, quantity: 1 });
            }
            renderCart();
            showToast(`Đã thêm ${prod.name} vào giỏ hàng!`);
            pulseCart();
        };

        function generateOrderCode() {
            return 'DH' + Math.floor(100000 + Math.random() * 900000);
        }

        // MODIFIED: Nút đặt hàng giờ sẽ mở modal thanh toán
        document.getElementById('order-btn').onclick = function() {
            if (cart.length === 0) {
                alert('Vui lòng chọn ít nhất một sản phẩm để đặt hàng!');
                return;
            }
            tempOrderCode = generateOrderCode(); // Tạo mã và lưu tạm
            openPaymentModal();
        };

        // NEW FUNCTION: Gửi đơn hàng cuối cùng
        window.submitOrder = async function() {
            if (!selectedPaymentMethod) {
                alert('Vui lòng chọn một phương thức thanh toán!');
                return;
            }
            
            showSpinner();
            const currentOrders = await fetchOrders();
            const newOrder = {
                code: tempOrderCode, // Sử dụng mã đã tạo
                items: cart.map(item => ({ name: item.name, price: item.price, quantity: item.quantity })),
                time: new Date().toLocaleString('vi-VN'),
                status: "pending",
                paymentMethod: selectedPaymentMethod,
                type: "customer_order"
            };
            const updatedOrders = [...currentOrders, newOrder];
            await saveOrders(updatedOrders);
            alert('Đặt hàng thành công! Mã đơn hàng của bạn: ' + newOrder.code);
            cart = [];
            tempOrderCode = '';
            selectedPaymentMethod = '';
            renderCart();
            closePaymentModal();
        };


        document.getElementById('check-order-btn').onclick = async function() {
            const code = document.getElementById('order-check-input').value;
            if (!code) {
                document.getElementById('check-order-result').innerHTML = '<span style="color:red;">Vui lòng nhập mã đơn hàng!</span>';
                return;
            }
            showSpinner();
            const allOrders = await fetchOrders();
            const found = allOrders.find(order => order.code === code.trim());
            const resultDiv = document.getElementById('check-order-result');
            if (found) {
                let statusText, statusClass;
                if (found.status === "paid") {
                    statusText = "Đã trả tiền";
                    statusClass = "status-paid";
                } else if (found.status === "received") {
                    statusText = "Đã nhận đơn";
                    statusClass = "status-received";
                } else {
                    statusText = "Chờ nhận đơn";
                    statusClass = "status-pending";
                }
                const total = found.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                resultDiv.innerHTML = `
                    <b>Trạng thái:</b> <span class="${statusClass} status-tag">${statusText}</span><br>
                    <b>Mã đơn hàng:</b> ${found.code}<br>
                    <b>Thời gian:</b> ${found.time || '-'}<br>
                    <b>Tổng tiền:</b> ${total.toLocaleString()} VNĐ<br>
                    <b>Sản phẩm:</b>
                    <ul>
                        ${found.items.map(item => `<li>${item.name} x ${item.quantity} (${item.price.toLocaleString()} VNĐ)</li>`).join('')}
                    </ul>
                `;
            } else {
                resultDiv.innerHTML = '<span style="color:red;">Không tìm thấy đơn hàng!</span>';
            }
            hideSpinner();
        };

        window.adminLogin = async function() {
            const user = document.getElementById('admin-user').value;
            const pass = document.getElementById('admin-pass').value;
            showSpinner();
            await new Promise(resolve => setTimeout(resolve, 500));
            if (user === 'thanh' && pass === '1') {
                isLoggedIn = true;
                document.getElementById('admin-modal').style.display = 'none';
                document.getElementById('admin-page').style.display = 'flex';
                await showOrdersAdmin('all');
                refreshIntervalId = setInterval(() => showOrdersAdmin(document.querySelector('.filter-btn.active').dataset.filter), 20000);
            } else {
                document.getElementById('admin-error').innerText = 'Sai tài khoản hoặc mật khẩu!';
            }
            hideSpinner();
        };

        window.closeAdminModal = function() {
            document.getElementById('admin-modal').style.display = 'none';
        };

        window.logoutAdmin = function() {
            isLoggedIn = false;
            clearInterval(refreshIntervalId);
            document.getElementById('admin-page').style.display = 'none';
            document.querySelector('.overlay').style.display = 'block';
        };
        
        function renderDashboard(data) {
            const total = data.length;
            const pending = data.filter(o => o.status === 'pending').length;
            const received = data.filter(o => o.status === 'received').length;
            const paid = data.filter(o => o.status === 'paid').length;
            
            document.getElementById('total-orders').innerText = total;
            document.getElementById('pending-orders').innerText = pending;
            document.getElementById('received-orders').innerText = received;
            document.getElementById('paid-orders').innerText = paid;
        }

        window.showOrdersAdmin = async function(filterStatus = 'all', ordersToDisplay = null) {
            const ordersList = document.getElementById('orders-list-admin-filtered');
            
            if (ordersToDisplay === null) {
                ordersList.innerHTML = 'Đang tải đơn hàng...';
                orders = await fetchOrders();
                if (!Array.isArray(orders) || orders.length === 0) {
                    ordersList.innerHTML = '<i>Chưa có đơn hàng nào.</i>';
                    renderDashboard([]);
                    document.getElementById('admin-search-clear-btn').style.display = 'none';
                    return;
                }
                renderDashboard(orders);
                let filteredOrders = [...orders];
                if (filterStatus !== 'all') {
                    filteredOrders = orders.filter(o => o.status === filterStatus);
                }
                ordersToDisplay = filteredOrders;
            } else {
                document.getElementById('admin-filter-buttons').style.display = 'none';
                document.getElementById('admin-dashboard').style.display = 'none';
                document.getElementById('admin-search-clear-btn').style.display = 'block';
            }
            
            ordersToDisplay.sort((a, b) => new Date(b.time) - new Date(a.time));

            ordersList.innerHTML = ordersToDisplay.map((order, idx) => {
                const total = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                
                let statusText, statusClass;
                if (order.status === "paid") {
                    statusText = "Đã trả tiền";
                    statusClass = "status-paid";
                } else if (order.status === "received") {
                    statusText = "Đã nhận đơn";
                    statusClass = "status-received";
                } else {
                    statusText = "Chờ nhận đơn";
                    statusClass = "status-pending";
                }
                
                const originalIndex = orders.findIndex(o => o.code === order.code);
                
                let actionButtons;
                if (order.status === 'pending') {
                    actionButtons = `
                        <button class="btn-nhan-don" onclick="markOrderAsReceived(${originalIndex})">
                            <i class="fas fa-check"></i> Nhận đơn
                        </button>
                    `;
                } else if (order.status === 'received') {
                    actionButtons = `
                        <button class="btn-thanh-toan" onclick="markOrderAsPaid(${originalIndex})">
                            <i class="fas fa-dollar-sign"></i> Đã thanh toán
                        </button>
                    `;
                } else {
                    actionButtons = '';
                }

                return `
                    <div class="admin-order-item">
                        <div class="order-info">
                            <h4>Mã đơn hàng: ${order.code}</h4>
                            <p><b>Thời gian:</b> ${order.time || '-'}</p>
                            <p><b>Trạng thái:</b> <span class="${statusClass} status-tag">${statusText}</span></p>
                            <p><b>Tổng tiền:</b> ${total.toLocaleString()} VNĐ</p>
                            <p><b>Chi tiết:</b></p>
                            <ul style="list-style-type: disc; padding-left: 20px; margin-top: 5px;">
                                ${order.items.map(item => `<li>${item.name} x ${item.quantity} (${item.price.toLocaleString()} VNĐ)</li>`).join('')}
                            </ul>
                        </div>
                        <div class="order-actions">
                            ${actionButtons}
                            <button class="btn-xoa-don" onclick="deleteOrderAdmin(${originalIndex})">
                                <i class="fas fa-trash-alt"></i> Xóa Đơn
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        };
        
        window.searchOrders = function() {
            const query = document.getElementById('admin-search-input').value.trim().toUpperCase();
            if (!query) {
                alert('Vui lòng nhập mã đơn hàng để tìm kiếm.');
                return;
            }
            const foundOrder = orders.find(o => o.code.toUpperCase() === query);
            
            if (foundOrder) {
                showOrdersAdmin('all', [foundOrder]);
            } else {
                document.getElementById('orders-list-admin-filtered').innerHTML = '<i>Không tìm thấy đơn hàng nào với mã này.</i>';
                document.getElementById('admin-filter-buttons').style.display = 'none';
                document.getElementById('admin-dashboard').style.display = 'none';
                document.getElementById('admin-search-clear-btn').style.display = 'block';
            }
        };

        window.clearSearch = function() {
            document.getElementById('admin-search-input').value = '';
            document.getElementById('admin-filter-buttons').style.display = 'flex';
            document.getElementById('admin-dashboard').style.display = 'grid';
            document.getElementById('admin-search-clear-btn').style.display = 'none';
            showOrdersAdmin('all');
        }

        window.filterOrders = function(status, btn) {
            const buttons = document.querySelectorAll('.filter-btn');
            buttons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            showOrdersAdmin(status);
        };

        window.markOrderAsReceived = async function(idx) {
            showSpinner();
            orders = await fetchOrders();
            if (orders[idx]) {
                orders[idx].status = "received";
                await saveOrders(orders);
            }
            await showOrdersAdmin(document.querySelector('.filter-btn.active').dataset.filter);
            hideSpinner();
        };

        window.markOrderAsPaid = async function(idx) {
            showSpinner();
            orders = await fetchOrders();
            if (orders[idx]) {
                orders[idx].status = "paid";
                await saveOrders(orders);
            }
            await showOrdersAdmin(document.querySelector('.filter-btn.active').dataset.filter);
            hideSpinner();
        };

        window.deleteOrderAdmin = async function(idx) {
            if (!confirm('Bạn có chắc chắn muốn xóa đơn hàng này?')) return;
            showSpinner();
            orders = await fetchOrders();
            orders.splice(idx, 1);
            await saveOrders(orders);
            await showOrdersAdmin(document.querySelector('.filter-btn.active').dataset.filter);
            hideSpinner();
        };
        
        document.getElementById('admin-btn').onclick = function() {
            if (isLoggedIn) {
                document.querySelector('.overlay').style.display = 'none';
                document.getElementById('admin-page').style.display = 'flex';
                clearSearch();
                showOrdersAdmin('all');
            } else {
                document.getElementById('admin-modal').style.display = 'flex';
                document.getElementById('admin-user').value = '';
                document.getElementById('admin-pass').value = '';
                document.getElementById('admin-error').innerText = '';
            }
        };

        window.openPreOrderModalFromAdmin = function() {
            document.getElementById('admin-page').style.display = 'none';
            document.getElementById('pre-order-modal').style.display = 'flex';
            preOrderCart = [];
            renderPreOrderProducts();
            renderPreOrderCart();
        }

        window.closePreOrderModal = function() {
            document.getElementById('pre-order-modal').style.display = 'none';
            if (isLoggedIn) {
                 document.getElementById('admin-page').style.display = 'flex';
            } else {
                 document.querySelector('.overlay').style.display = 'block';
            }
        }

        function renderPreOrderProducts() {
            const preOrderProductList = document.getElementById('pre-order-product-list');
            preOrderProductList.innerHTML = products.map(product => `
                <div class="product">
                    <img src="${product.image}" alt="${product.name}" />
                    <h3>${product.name}</h3>
                    <p>Giá: ${product.price.toLocaleString()} VNĐ</p>
                    <div style="display:flex; justify-content:center; gap: 5px;">
                        <input type="number" id="pre-order-qty-${product.id}" value="1" min="1" style="width: 50px; text-align: center; border-radius: 5px;" />
                        <button onclick="addToPreOrderCart(${product.id})">Thêm</button>
                    </div>
                </div>
            `).join('');
        }

        window.addToPreOrderCart = function(productId) {
            const prod = products.find(p => p.id === productId);
            const quantityInput = document.getElementById(`pre-order-qty-${productId}`);
            const quantity = parseInt(quantityInput.value);
            if (isNaN(quantity) || quantity <= 0) {
                alert('Số lượng không hợp lệ!');
                return;
            }
            const found = preOrderCart.find(item => item.id === prod.id);
            if (found) {
                found.quantity += quantity;
            } else {
                preOrderCart.push({ ...prod, quantity: quantity });
            }
            renderPreOrderCart();
        }

        function renderPreOrderCart() {
            const preOrderCartItems = document.getElementById('pre-order-cart-items');
            const preOrderTotal = document.getElementById('pre-order-total');
            const submitBtn = document.getElementById('submit-pre-order-btn');
            if (preOrderCart.length === 0) {
                preOrderCartItems.innerHTML = 'Giỏ hàng trống.';
                preOrderTotal.innerHTML = 'Tổng tiền: 0 VNĐ';
                submitBtn.style.display = 'none';
                return;
            }
            submitBtn.style.display = 'block';
            let total = 0;
            preOrderCartItems.innerHTML = preOrderCart.map((item, idx) => {
                total += item.price * item.quantity;
                return `
                    <div class="cart-item">
                        <img src="${item.image}" alt="${item.name}" />
                        <div class="cart-item-info">
                            <h4>${item.name}</h4>
                            <p>${item.price.toLocaleString()} VNĐ</p>
                        </div>
                        <div class="quantity-control">
                            <button onclick="changePreOrderQty(${idx}, -1)">-</button>
                            <span>${item.quantity}</span>
                            <button onclick="changePreOrderQty(${idx}, 1)">+</button>
                        </div>
                    </div>
                `;
            }).join('');
            preOrderTotal.innerHTML = `Tổng tiền: ${total.toLocaleString()} VNĐ`;
        }

        window.changePreOrderQty = function(idx, delta) {
            preOrderCart[idx].quantity += delta;
            if (preOrderCart[idx].quantity <= 0) {
                preOrderCart.splice(idx, 1);
            }
            renderPreOrderCart();
        }

        document.getElementById('submit-pre-order-btn').onclick = async function() {
            if (preOrderCart.length === 0) {
                alert('Vui lòng chọn ít nhất một sản phẩm để tạo đơn hàng!');
                return;
            }
            showSpinner();
            const newPreOrder = {
                code: generateOrderCode(),
                items: preOrderCart.map(item => ({ name: item.name, price: item.price, quantity: item.quantity })),
                time: new Date().toLocaleString('vi-VN'),
                status: "paid",
                type: "preorder"
            };
            
            const currentOrders = await fetchOrders();
            const updatedOrders = [...currentOrders, newPreOrder];
            await saveOrders(updatedOrders);
            
            alert(`Đã tạo đơn hàng trước thành công! Mã đơn: ${newPreOrder.code}`);
            closePreOrderModal();
            showOrdersAdmin('all');
            hideSpinner();
        };

        window.openCartModal = function() {
            document.getElementById('cart-modal').style.display = 'flex';
            renderCart();
        }
        
        window.closeCartModal = function() {
            document.getElementById('cart-modal').style.display = 'none';
        }

        // NEW FUNCTIONS FOR PAYMENT MODAL
        window.openPaymentModal = function() {
            document.getElementById('payment-order-code').innerText = tempOrderCode;
            closeCartModal(); // Đóng giỏ hàng
            document.getElementById('payment-modal').style.display = 'flex';

            // Reset trạng thái modal
            document.getElementById('qr-code-container').style.display = 'none';
            document.querySelectorAll('#payment-methods button').forEach(btn => btn.classList.remove('active'));
            selectedPaymentMethod = '';
        }

        window.closePaymentModal = function() {
            document.getElementById('payment-modal').style.display = 'none';
            // Mở lại giỏ hàng nếu người dùng hủy
            if(tempOrderCode) {
                 openCartModal();
            }
            tempOrderCode = '';
        }
        
        window.selectPaymentMethod = function(method, btn) {
            selectedPaymentMethod = method;
            const qrContainer = document.getElementById('qr-code-container');
            
            // Xóa class 'active' khỏi tất cả các nút
            document.querySelectorAll('#payment-methods button').forEach(b => b.classList.remove('active'));
            // Thêm class 'active' vào nút được chọn
            btn.classList.add('active');
            
            if (method === 'qr') {
                qrContainer.style.display = 'block';
            } else {
                qrContainer.style.display = 'none';
            }
        }
        
        renderProducts('all');
    </script>
</body>
</html>
